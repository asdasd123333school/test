ls /dev/video*

sudo apt-get install fswebcam

fswebcam -r 1280x720 --no-banner /path/to/save/image.jpg

crontab -e

0 * * * * fswebcam -r 1280x720 --no-banner /path/to/save/image_$(date +\%Y\%m\%d_\%H\%M\%S).jpg

本地
scp pi@<樹莓派 IP 地址>:/path/to/shared/image.jpg C:\local\path\to\save\



orange to SQL 下載window
https://orangedatamining.com/blog/how-to-enable-sql-widget-in-orange/
https://pypi.org/project/pymssql/#files <-載這個
試試看orange的add-one
https://orangedatamining.com/download/
https://pypi.org/project/Orange3/3.7.1/#files

國人的OCR，下載試試
https://github.com/PaddlePaddle/PaddleOCR?tab=readme-ov-file #線上版試試，自己拍照
https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/pip/windows-pip.html
https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html
https://www.lfd.uci.edu/~gohlke/pythonlibs/#shapely

def detect(save_img=False):
    s1 = datetime.now()
    print("s1=",s1)

    source, weights, view_img, save_txt, imgsz, trace = opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size, not opt.no_trace
    save_img = not opt.nosave and not source.endswith('.txt')  # save inference images
    webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(
        ('rtsp://', 'rtmp://', 'http://', 'https://'))
    e1 = datetime.now()
    print("e1=",e1)   
    
    e2 = datetime.now()
    print("e2=",e2)
    # Initialize
    set_logging()
    device = select_device(opt.device)
    half = device.type != 'cpu'  # half precision only supported on CUDA
    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(imgsz, s=stride)  # check img_size
    e3 = datetime.now()
    print("e3=",e3)

    if half:
        model.half()  # to FP16
    e4 = datetime.now()
    print("e4=",e4)
    dataset = LoadImages(source, img_size=imgsz, stride=stride)

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(20, 250) for _ in range(3)] for _ in names]
    colors[2] = (0,0,255) #將危險動作框變成紅色
    e5 = datetime.now()
    print("e5=",e5)

    e6 = datetime.now()
    print("e6=",e6)
    t0 = time.time()

    for path, img, im0s, vid_cap in dataset:

        # 現在時間
        datetime_dt = datetime.today()
        datetime_str = datetime_dt.strftime("%Y-%m-%d %H:%M:%S")
        datetime_time = datetime_dt.strftime("%H%M%S")
        people = str("None") #偵測是誰(之後新增)
        place = str("MVI 200") #偵測地點(之後改成動態)

        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)
        e7 = datetime.now()
        print("e7=",e7)

        e8 = datetime.now()
        print("e8=",e8)

        print('img=',img)
        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img, augment=opt.augment)[0]

        e9 = datetime.now()
        print("e9=",e9)
        # Apply NMS
        print(pred.shape)
        pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)

        e10 = datetime.now()
        print("e10=",e10)

        # Process detections
        for i, det in enumerate(pred):  # detections per image

            p, s, im0, frame = path, '', im0s, getattr(dataset, 'frame', 0)
            e11 = datetime.now()
            print("e11=",e11)
            p = Path(p)  # to Path

            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()
                e12 = datetime.now()
                print("e12=",e12)
                # Print results
                for c in det[:, -1].unique():
                    n = (det[:, -1] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}、"  # add to string

                # Write results
                for *xyxy, conf, cls in reversed(det):

                    # if save_img or view_img:  # Add bbox to image
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)
                e13 = datetime.now()
                print("e13=",e13)
