---------run.py----------設定命令字元
# 获取包含所有图片文件的文件夹路径
image_folder = 'test_img'
# 切换到"yolov7"文件夹
os.chdir(r'C:\Users\YuqiChan\Desktop\Chan\pose-estimation\yolov7')

while True:
    # 获取文件夹中的所有图片文件路径
    image_files = glob.glob(os.path.join(image_folder, '*.jpg'))
    # model = load_model()

    if len(image_files) > 0:
        # 选择第一张图片的路径作为 --source 参数的值
        source_path = image_files[0]
        # 构建完整的命令行命令  
        command = f'python detect.py --weights runs/train/exp/weights/best.pt --source {source_path} --conf 0.41 --no-trace '  
        # 执行命令
        os.system(command)
        time.sleep(0.01)

        # 删除辨識後的图片文件
        os.remove(source_path)
    else:
        break


----------detect.py------------用命令字元呼叫
def detect(save_img=False):

    source, weights, imgsz= opt.source, opt.weights, opt.img_size

    # Initialize
    set_logging()
    device = select_device(opt.device)
    half = device.type != 'cpu'  # half precision only supported on CUDA
    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(imgsz, s=stride)  # check img_size

    if half:
        model.half()  # to FP16

    dataset = LoadImages(source, img_size=imgsz, stride=stride)

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(20, 250) for _ in range(3)] for _ in names]
    colors[2] = (0,0,255) #將危險動作框變成紅色

    for path, img, im0s, vid_cap in dataset:

        # 現在時間
        datetime_dt = datetime.today()
        datetime_str = datetime_dt.strftime("%Y-%m-%d %H:%M:%S")
        datetime_time = datetime_dt.strftime("%H%M%S")
        people = str("None") #偵測是誰(之後新增)
        place = str("MVI 200") #偵測地點(之後改成動態)

        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img, augment=opt.augment)[0]
        print(pred) #這邊的size=torch.Size([1, 15120, 13])

        # Apply NMS
        pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)
        print(pred) #正確的[tensor([[177.45377,  13.02184, 400.94608, 223.58255,   0.66402,   2.00000]])]

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default='yolov7.pt', help='model.pt path(s)')
    parser.add_argument('--source', type=str, default='inference/images', help='source')  # file/folder, 0 for webcam
    parser.add_argument('--img-size', type=int, default=640, help='inference size (pixels)')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='object confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='IOU threshold for NMS')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--view-img', action='store_true', help='display results')
    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
    parser.add_argument('--save-conf', action='store_true', help='save confidences in --save-txt labels')
    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --class 0, or --class 0 2 3')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--update', action='store_true', help='update all models')
    parser.add_argument('--project', default='runs/detect', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    parser.add_argument('--no-trace', action='store_true', help='don`t trace model')
    opt = parser.parse_args()

    with torch.no_grad():
        if opt.update:  # update all models (to fix SourceChangeWarning)
            for opt.weights in ['yolov7.pt']:
                detect()
                strip_optimizer(opt.weights)
        else:
            detect()  

-----------predict_3.py----------------不用命令字元呼叫
def load_model():
    weights =  opt.weights
    # Initialize
    set_logging()
    device = select_device(opt.device)
    half = device.type != 'cpu'  # half precision only supported on CUDA
    # Load model
    model = attempt_load(weights, map_location=device)  # load FP32 model

    if half:
        model.half()  # to FP16
    return model

def detect(model,source, imgsz,save_img=False):

    # Initialize
    set_logging()
    device = select_device(opt.device)
    half = device.type != 'cpu'  # half precision only supported on CUDA

    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(imgsz, s=stride)  # check img_size

    if half:
        model.half()  # to FP16

    dataset = LoadImages(source, img_size=imgsz, stride=stride)
    print('source===',source)

    # Get names and colors
    names = model.module.names if hasattr(model, 'module') else model.names
    colors = [[random.randint(20, 250) for _ in range(3)] for _ in names]
    colors[2] = (0,0,255) #將危險動作框變成紅色

    for path, img, im0s, vid_cap in dataset:

        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        with torch.no_grad():   # Calculating gradients would cause a GPU memory leak
            pred = model(img, augment=opt.augment)[0]
        print(pred) #這邊的size=torch.Size([1, 33768, 13])
      
        # Apply NMS
        pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)
        print('pred======>',pred) #錯誤的是[tensor([], size=(0, 6))]

if __name__ == '__main__':

    opt = argparse.Namespace(
            weights='yolov7/runs/train/exp/weights/best.pt',
            conf=0.4,
            img_size=640,
            conf_thres=0.25,
            iou_thres=0.45,
            device='cpu',
            classes=0,
            agnostic_nms='store_true',
            augment='store_true'
        )

    # Load the model only once
    model= load_model()
    
    image_folder = r'.\yolov7\test_img'

    # while True:
    image_files = glob.glob(os.path.join(image_folder, '*.jpg'))
    if len(image_files) > 0:
        source = image_files[0]
        detect(model,source, opt.img_size)
        time.sleep(0.01)
        os.remove(source)
    # else:
    #     break
